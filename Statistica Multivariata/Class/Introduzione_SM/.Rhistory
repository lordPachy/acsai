install.packages("CRAN")
getwd()
# impostare la directory di lavoro
#-------------------------------------------------------------------------
#
# dal menu File-->Cambia Directory --> selezionare X:\Giordani
# oppure...
setwd('/home/pachy/Desktop/ACSAI/acsai/Statistica Multivariata/Class/Introduzione_SM')
getwd()
?rnorm
set.seed(0)
vett = rnorm(100, 1, 2)
vett
vett[vett>mean(vett)]
vett[which(vett>mean(vett))]
vec = seq(1, 10, 2)
vec
vec = 1:10 + 1
vec
is.na(vec_na)
vec_na = c(1, 2, 3, NA, 4)
is.na(vec_na)
mean(vec_na, rm.na = T)
vec_na
mean(vec_na, rm.na = TRUE)
mean(vec_na, na.rm = TRUE)
# Dati mancanti
Si pu√≤ controllare l'esistenza con
mean(vec_na[!is.na(vec_na)])
mat4 <- matrix(c(1,2,3,4,5,6),nrow=6,ncol=4)
dim(mat4)
mat2 <- matrix(1:24,nrow=6,ncol=4)
mat2
mat1 = matrix(1:24, nrow = nrow = 4, ncol = 6)
mat1 = matrix(1:24, nrow = 4, ncol = 6)
mat1
mat2
mat2 = matrix(1:24, nrow = 4, ncol = 6, byrow =t)
mat2 = matrix(1:24, nrow = 4, ncol = 6, byrow =T)
mat2
mat1 == c(1, 6)
mat1 = matrix(1:24, nrow = 4, ncol = 6)
mat1
mat1 == 1:6
mat1 == c(1:6)
mat1 == c(1:6)
mat_apply = apply(X =mat2, MARGIN = 1, FUN = sum)
mat_apply
mat2 <- matrix(1:24,nrow=6,ncol=4)
mat2
vett = c(3,9,15,21)
mat2 <- matrix(1:24,nrow=6,ncol=4)
mat2
mat2 == vett
mat[3, ] == vett
mat3[3, ] == vett
mat2[3, ] == vett
any(c(F, F, T, F, F, F))
t(mat2) == vett
t(t(mat2) == vett))
t(t(mat2) == vett)
bool_mat = t(t(mat2) == vett)
any(bool)
any(all(t(bool_mat)))
bool_mat = t(t(mat2) == vett)
bool_mat
apply(bool_mat, MAR = 2, all)
apply(bool_mat, MAR = 1, all)
par_mat =apply(bool_mat, MAR = 1, all)
any(par_mat)
mat3 = mat1 %*% mat2
mat3
mat3bis = t(mat1) * mat(2)
mat3bis = t(mat1) * mat2
mat3bis
diag(matrix(1:4, nrow = 2, nrow = 2))
diag(matrix(1:4, nrow = 2, ncol = 2))
diag(c(1, 2, 3))
diag(c(1, 2, 3))
diag(matrix(1:4, nrow = 2, ncol = 2))
diag(3)
mat2^-1
solve(mat1)
solve(mat3)
solve(diag(3))
load('Introduzione.RDATA')
getwd()
load("Introduzione.RDATA")
load("Introduzione.RData")
head(dati.apat)
which.max(dati.apat$temp)
dati.apat[which.max(dati.apat$temp)]
which.max(dati.apat$temp)
dati.apat[which.max(dati.apat$temp),]
dati.apat[which.max(dati.apat$temp), Data]
dati.apat[which.max(dati.apat$temp), "Data"]
attach(dati.apat)
nrow(dati.apat)
nrow(dati.apat)/10
set.seed(1212)
s10 = sample(dati.apat$temp, nrow(dati.apat) / 10)
s10
median(s10, na.rm = T)
s11
s11 = sample(x = nrow(dati.apat), size = nrow(dati.apat)/10)
s11
dati.apat[s11]
dati.apat[s11, ]
