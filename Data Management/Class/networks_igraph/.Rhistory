)
head(mtcars)
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point(mapping = aes(color = vs, shape = vs)) + geom_smooth(method = "lm") + labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
)
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point()) + geom_smooth(method = "lm") + labs(
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point() + geom_smooth(method = "lm") + labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
)
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point() + geom_smooth(method = "lm")
summary(mtcars)
head(mtcars)
ggplot(data = mtcars,
mapping = aes(x = hp, y = gear)) + geom_point() + geom_smooth(method = "lm")
mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
mapping = aes(x = hp, y = gear) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars,
ggplot(data = mtcars,
ggplot(data = mtcars, mapping = aes(x = hp, y = gear) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear)) + geom_smooth(method = "lm")
head(mtcars)
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = gear, y = hp)) + geom_point() + geom_smooth(method = "lm")
head(mtcars)
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point() + geom_smooth(method = "lm")
mode(mtcars$am)
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = am, shape = am)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point() + geom_smooth(method = "lm")
head(mtcars)
head(mtcars)
summary(mtcars)
head(mtcars)
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = cyl)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = cyl, shape=cyl)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = am)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = vs)) + geom_smooth(method = "lm")
#Exercise 1
ggplot(data = mtcars, mapping = aes(x = wt, y = MPG)) + geom_point() + geom_smooth(method = "lm")
#Exercise 1
ggplot(data = mtcars, mapping = aes(x = wt, y = MTG)) + geom_point() + geom_smooth(method = "lm")
#Exercise 1
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = "lm")
dataset(iris)
data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.length)) + geom_histogram()
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram()
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram()
#Exercise 1
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = "lm")
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + geom_point() + facet_grid(~gear) + geom_smooth(method = "lm") + theme_dark()
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + geom_point() + facet_grid(~gear) + geom_smooth(method = "lm") + theme_minimal()
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt, color = cyl)) + geom_point() + facet_grid(~gear) + geom_smooth(method = "lm") + theme_minimal()
#Exercise 4
mode(mtcars)
fourcyl = dplyr::filter(mtcars, cyl == 4)
summary(fourcyl)
head(fourcyl)
sixcyl = dplyr::filter(mtcars, cyl == 6)
summary(mtcars)
ggplot(mtcars, aes(x = mpg)) + geom_boxplot() + facet_wrap(~cyl)
ggplot(mtcars, aes(y = mpg)) + geom_boxplot() + facet_wrap(~cyl)
installed.packages("RSelenium")
install.packages("rvest")
install.packages("tidyverse")
installed.packages("RSelenium")
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
install.packages("RSelenium")
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
install.packages("RSelenium")
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = RSelenium::rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = RSelenium::rsDriver(browser = "firefox", port = 4545L, verbose = F)
library(RSelenium)
library(rvest)
library(tidyverse)
rd = RSelenium::rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = rsDriver(browser = "firefox", port = 4545L, verbose = F)
rd = rsDriver(browser = "firefox", port = 4545L, verbose = T)
binman::rm_platform("phantomjs")
rd = rsDriver(browser = "firefox", port = 4545L, verbose = T)
library(wdman)
selenium(retcommand = T)
rd = rsDriver(browser = "firefox", port = 4545L, verbose = T)
dataset(iris)
data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length)) + geom_density()
data(iris) library(ggplot2) ggplot(iris, aes(x = Sepal.Length)) + geom_density()
data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length)) + geom_density()
ggplot(iris, aes(x = Sepal.Length)) + geom_density()
mean = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
ggplot(data.frame(x=x, y = dnorm(x, mean = u, sd = v))) + geom_line()
u = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
ggplot(data.frame(x=x, y = dnorm(x, mean = u, sd = v))) + geom_line()
ggplot(data.frame(x=x, y = dnorm(x, mean = u, sd = v)), aes(x=x, y=x)) + geom_line()
ggplot(data.frame(x=x, y = dnorm(x, mean = u, sd = v)), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x=x, y = y), aes(x=x, y=y)) + geom_line()
v = var(iris$Sepal.Length)
gauss = dnorm(x, mean = u, sd = v)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
t.test(iris$Sepal.Length, gauss)
ks.test(iris$Sepal.Length, gauss)
ks.test(iris$Sepal.Length, gauss)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line()
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line() + xlim(pet_min-3, pet_max+3)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line() + xlim(pet_min-3, pet_max+3)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line() + xlim(pet_min, pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line() + xlim(pet_min-10, pet_max+10)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line()
min(iris$Petal.Width)
max(iris$Petal.Width)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x = x, y = dunif(x, min=0, max=1)), aes(x=x, y=x))
ggplot(data.frame(x = x, y = dunif(x, min=0, max=1)), aes(x=x, y=x)) + geom_line()
ggplot(data.frame(x = x, y = dunif(x, min=0, max=1)), aes(x=x, y=y)) + geom_line()
x = seq(min(iris$Sepal.Length, max(iris$Sepal.Length)), 100)
u = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
gauss = dnorm(x, mean = u, sd = v)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
x = seq(min(iris$Sepal.Length, max(iris$Sepal.Length)), length.out = 100)
u = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
gauss = dnorm(x, mean = u, sd = v)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
x = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 100)
u = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
gauss = dnorm(x, mean = u, sd = v)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
compare = pivot_longer(data = iris, cols = c("Sepal.Width", "Petal.Width"), names_to = "Specie", values_to = "Values")
t.test(iris$Sepal.Length, gauss)
ks.test(iris$Sepal.Length, gauss)
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line()
x = seq(pet_min, pet_max, length.out = 100)
x = seq(pet_min, pet_max, length.out = 1)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line()
x = seq(pet_min, pet_max, length.out = 100)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y)) + geom_line()
ggplot(data.frame(x = unif_pet, y = iris$Petal.Width), aes(x=x, y=y)) + geom_line()
library(tidyr)
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
x = seq(pet_min, pet_max, length.out = 100)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = unif_pet, y = iris$Petal.Width), aes(x=x, y=y,)) + geom_line()
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line()
ggplot(data = data.frame(real = iris$Petal.Width, simul = unif_pet), aes(x = x)) + geom_line(aes(y = real)) + geom_line(aes(y = unif_pet))
ggplot(data = data.frame(real = iris$Petal.Width, simul = unif_pet), aes(x = x)) + geom_line(aes(y = real))
ggplot(data = data.frame(real = iris$Petal.Width, simul = unif_pet), aes(x = x)) + geom_line(aes(y = simul))
ggplot(data = data.frame(x = x, y = unif_pet), aes(x = x)) + geom_line(aes(y = y))
ggplot(data = data.frame(x = x, y = unif_pet), aes(x = x)) + geom_line(aes(y = y)) + geom_density(aes(y = iris$Petal.Width))
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
x = seq(pet_min, pet_max, length.out = 150)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line()
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
x = seq(pet_min, pet_max, length.out = 150)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line()
```{r}
ggplot(data = data.frame(x = x, y = unif_pet), aes(x = x)) + geom_line(aes(y = y)) + geom_density(aes(y = iris$Petal.Width))
ggplot(data = data.frame(x = x, y = unif_pet), aes(x = x)) + geom_line(aes(y = y)) + geom_density()
data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length)) + geom_density()
x = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 100)
u = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
gauss = dnorm(x, mean = u, sd = v)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
compare = pivot_longer(data = iris, cols = c("Sepal.Width", "Petal.Width"), names_to = "Specie", values_to = "Values")
t.test(iris$Sepal.Length, gauss)
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
x = seq(pet_min, pet_max, length.out = 150)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line()
#compare = pivot_longer(data = iris, cols = c("Sepal.Width", "Petal.Width"), names_to = "Specie", values_to = "Values")
```
library(ggplot2)
dplyr
libray(dplyr)
library(dplyr)
library(duckdb)
library(ggplot2)
library(dplyr)
install.packages("duckdb")
titanic_data = read.csv("titanic.csv")
dbConnect()
con = dbConnect(duckdb(), dbname="titanic.db")
titanic_data = read.csv("titanic.csv")
View(titanic_data)
dbWriteTable(con, "passengers", titanic_data, row.names=FALSE)
df_adult_passengers=dbGetQuery(con, "SELECT * FROM passengers WHERE age > 18")
df_adult_passengers = as.data.frame(df_adult_passengers)
df_adult_passengers
filtered_data = df_adult_passengers %>%
filter(Survived == 1 & Age > 18)
filtered_data = df_adult_passengers %>%
filter(Survived == 1 & Age > 18)
filtered_data
mean_age = filtered_data %>%
group_by(Sex) %>%
mean()
mean_age
mean_age = filtered_data %>%
group_by(Sex) %>%
summarize(mean_age = mean(Age, na.rm=TRUE))
mean_age
age_plot = ggplot(filtered_data, aes(x=Age)) +
geom_histogram(binwidth = 5, fill="skyblue", colour="black")
+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot = ggplot(filtered_data, aes(x=Age)) +
geom_histogram(binwidth = 5, fill="skyblue", colour="black")+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot = ggplot(filtered_data, aes(x=Age)) +
geom_histogram(binwidth = 5, fill="skyblue", colour="black")+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=Age)) +
geom_histogram(binwidth = 100, fill="skyblue", colour="black")+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=Age)) +
geom_histogram(binwidth = 5, fill="skyblue", colour="black")+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=Age, group= Sex, fill=Sex)) +
geom_histogram(binwidth = 5, fill="skyblue", colour="black")+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=Age, group= Sex, fill=Sex)) +
geom_histogram(binwidth = 5, fill="skyblue", colour="black", position=dodge)+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot = ggplot(filtered_data, aes(x=Age, group= Sex, fill=Sex)) +
geom_histogram(binwidth = 5, fill="skyblue", colour="black", position="dodge")+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=Age, group= Sex, fill=Sex)) +
geom_histogram(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=Age, group= Sex, fill=Sex)) +
geom_histogram(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) +
geom_histogram(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) + geom_histogram(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
age_plot = ggplot(filtered_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) + geom_barplot(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot = ggplot(filtered_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) + geom_barline(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot = ggplot(filtered_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) + geom_bar(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
install.packages("patchwork")
library(patchwork)
class_plot = ggplot(filtered_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) + geom_bar(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
class_plot
compound_plt = class_plot + age_plot
install.packages("patchwork")
library(patchwork)
compound_plt = class_plot + age_plot
install.packages("patchwork")
install.packages("patchwork")
library(patchwork)
compound_plt = class_plot + age_plot
class_plot = ggplot(titanic_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) + geom_bar(colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
library(ggplot2)
age_plot = ggplot(filtered_data, aes(x=Age, group= Sex, fill=Sex)) +
geom_histogram(binwidth = 5, colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
age_plot
class_plot = ggplot(titanic_data, aes(x=factor(Pclass), group= factor(Survived), fill=factor(Survived))) + geom_bar(colour="black", position="dodge")+ labs(title = "Age distribution by sex of Surviving Passengers over 18",
x = "Age",
y = "Frequency")
class_plot
#install.packages("patchwork")
library(patchwork)
compound_plt = class_plot + age_plot
#install.packages("patchwork")
library(patchwork)
compound_plt = patchwork::wrap_plots(class_plot, age_plot)
# Load required library
library(data.table)
# Example 1: Creating a data.table
dt <- data.table(
id = c(1, 2, 3, 4, 5),
name = c("John", "Jane", "Mike", "Emily", "David"),
age = c(25, 32, 28, 36, 41)
)
# Example 2: Filtering rows based on a condition
filtered_dt <- dt[age > 30]
filtered_dt
# Example 3: Selecting specific columns
selected_cols <- dt[, .(id, name)]
selected_cols
```{r}
# Example 4: Sorting data by a column
sorted_dt <- dt[order(age)]
sorted_dt
# Example 5: Aggregating data and calculating summary statistics
aggregated_dt <- dt[, .(mean_age = mean(age)), by = name]
aggregated_dt
#an example of join
dt2 = data.table(
id = c(2, 4, 6)
salary = c(50000, 60000, 70000)
#an example of join
dt2 = data.table(
id = c(2, 4, 6),
salary = c(50000, 60000, 70000)
)
merged_dt = dt[dt2, on = "id"]
merged_dt
#an example of join
dt2 = data.table(
id = c(2, 4, 5),
salary = c(50000, 60000, 70000)
)
merged_dt = dt[dt2, on = "id"]
#id is the foreign key to join the two tables
merged_dt
dt
dt[, birth_year:= rep("2001", nrow(dt))]
dt[, birth_year:= rep("2001", nrow(dt))]
dt
grouped_dt = dt[, .(mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt = dt[, .(mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt
grouped_dt = dt[, (mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt = dt[, .(mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt
#| label: Missing values
dt[is.na(age), age := 0]
dt
#| label: Missing values
dt[is.na(age), age := 0]
#| label: Missing values
dt[is.na(age), age := 0]
dt[age<30, can_vote := "Yes"]
dt
result = dt[age>30][, .(mean_age=mean(age)), by=name]
result
result = dt[age>30, .(mean_age=mean(age), by = name)]
result
result = dt[age>30, .(mean_age=mean(age)), by = name]
result
result = dt[age>30&&can_vote "Yes", .(mean_age=mean(age)), by = name]
result = dt[age>30&&can_vote == "Yes", .(mean_age=mean(age)), by = name]
result = dt[age>30&&can_vote == "No", .(mean_age=mean(age)), by = name]
result = dt[age<30&&can_vote == "Yes", .(mean_age=mean(age)), by = name]
result = dt[age<30&can_vote == "Yes", .(mean_age=mean(age)), by = name]
result
#| label: Adding entries
v = data.frame("id" = dt[, max(id)], "name" = "john", "age" = 41, "birth_year" = 2050, "can_vote" = "no")
dt = rbind(dt, v)     #this is for uniting the two
dt
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Time Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Time Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Time Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data\ Management/Class practice/Scripts/Time\ Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data\ Management/Class practice/Scripts/Time\ Series")
#| label: Setting up
getwd()
large_dt = fread("LEZ_4_large_dataset.csv")
large_dt = fread("LEZ_4_large_dataset.csv")
ncol(large_dt)
colnames(large_dt)
large_dt[, .N, by = type]
View(large_dt)
large_dt[, .N, by = type]
#| label: Writing to an external table
fwrite(large_dt, "output.csv")
unique_dt  = unique(large_dt)
column_sum = large_dt[, cum_sum := cumsum(alt)]
column_sum
large_dt[, age_category := ifelse(age < 30, "Young", "Adult")]
#| label: Sampling
sample_dt = large_dt[sample(.N, 100)]
sample_dt
#| label: Sampling with indices
sample_dt = large_dt[large_dt[alt<1000, sample(.N, 100)]]
#| label: Sampling with indices
sample_dt = large_dt[large_dt[alt<1000, sample(.N, 100)]]
sample_dt
install.packages("data.tables", "AER"
install.packages("data.tables", "AER")
install.packages("data.tables")
install.packages("AER")
install.packages("data.table")
install.packages("AER")
#install.packages("data.table")
#install.packages("AER")
library(data.table)
library(AER)
#install.packages("data.table")
#install.packages("AER")
library(data.table)
library("AER")
#install.packages("data.table")
install.packages("AER")
library(data.table)
library("AER")
library(AER)
#install.packages("data.table")
install.packages("AER")
library(data.table)
library(AER)
seg.raw <- read.csv("http://goo.gl/qw303p")
head(seg.raw)
plot(density(seg.row(income)))
plot(density(seg.row[income]))
plot(density(seg.raw[income]))
plot(density(seg.raw(income))
plot(density(seg.raw(income))
plot(density(seg.raw["income"])
plot(density(seg.raw$income))
seg.raw <- read.csv("http://goo.gl/qw303p")
head(seg.raw)
plot(density(seg.raw$income))
dist(c(1, 2, 3), c(2, 3, 2))
dist(rbind(c(1, 2, 3), c(2, 3, 2)))
library(igraph)
load("~/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Sentiment Analysis/posts_disneypixar.rdata")
setwd('/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/networks_igraph')
load("posts_disneypixar.rdata")
load("comments_disneypixar.rdata")
comments = load("comments_disneypixar.rdata")
head(comments)
load("comments_disneypixar.rdata")
head(comments)
edges = data.frame("from" = comments$from_id, "to" = comments$post_id, stringsAsFactors = F)
count(edges)
N(edges)
g = graph.data.frame(edges, directed = F)
g = graph_from_data_frame(edges, directed = F)
g[edges]
g
E(net)
E(g)
V(g)
