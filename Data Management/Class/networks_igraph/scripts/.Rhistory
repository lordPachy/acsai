panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Avg_5 := rollmean(monthly_revenues$Total_Revenue, k=5, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_5), lwd=1)+
ylab("Rolling Avg (Total Revenues)")+
ggtitle("Rolling Average of Monthly Total Revenues", subtitle = "Window width = 5")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Med_3 := rollmedian(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Total Revenues)")+
ggtitle("Rolling Median of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Sum_3 := rollsum(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Sum_3), lwd=1)+
ylab("Rolling Sum (Total Revenues)")+
ggtitle("Rolling Sum of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Max_3 := rollmax(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Max_3), lwd=1)+
ylab("Rolling Max (Total Revenues)")+
xlab("Month")+
ggtitle("Rolling Max of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
head(revenues)
ggplot(daily_sold_products, aes(x=Day))+
geom_line(aes(y=Sold_Products))+
theme_bw()
#| label: Daily aggregation
revenues <- revenues[, Day := as.Date(registered_at)]
# Now we just have to sum the Total_Revenues
daily_sold_products <- revenues[, sum(Sold_Products), by=Day]
# Rename the sum column and visualize
names(daily_sold_products)[2] <- "Sold Products"
ggplot(daily_sold_products, aes(x=Day))+
geom_line(aes(y=Sold_Products))+
theme_bw()
#| label: Daily aggregation
revenues <- revenues[, Day := as.Date(registered_at)]
# Now we just have to sum the Total_Revenues
daily_sold_products <- revenues[, sum(Sold_Products), by=Day]
# Rename the sum column and visualize
names(daily_sold_products)[2] <- "Sold Products"
ggplot(daily_sold_products, aes(x=Day))+
geom_line(aes(y=Sold Products))+
#| label: Daily aggregation
revenues <- revenues[, Day := as.Date(registered_at)]
# Now we just have to sum the Total_Revenues
daily_sold_products <- revenues[, sum(Sold_Products), by=Day]
# Rename the sum column and visualize
names(daily_sold_products)[2] <- "Sold_Products"
ggplot(daily_sold_products, aes(x=Day))+
geom_line(aes(y=Sold_Products))+
theme_bw()
revenues[,min(Day)]
revenues[,max(Day)]
revenues[,min(Day)]
revenues[,max(Day)]
#| label: Monthly aggregation of sold products
#|
# We can create a date with the function make_date
make_date(year=2011, month =1, day=1)
# And create a sequence using the make_date function
obs_months <- seq(from = make_date(year=2011, month =1, day=1),
to=make_date(year=2017, month =1, day=1),
by="1 month")
obs_months
# Let's bin our dates using obs_months
revenues <- revenues[, Month_bin := cut(x=Day, breaks=obs_months,
include.lowest=TRUE)]
# And repeat the sum by Month_bin
monthly_sold_products <- revenues[, sum(Sold_Products), by=Month_bin]
# Rename the sum column and visualize
names(monthly_sold_products)[2] <- "Sold_Products"
# The last thing to do is to convert our Month_bin variable to Date, since it is
# a character variable
monthly_sold_products <- monthly_sold_products[, Month_bin:= as.Date(Month_bin)]
ggplot(monthly_sold_products, aes(x=Month_bin))+
geom_line(aes(y=Sold_Products))+
theme_bw()
#| label: Moving average
library(zoo)
monthly_sold_products <- monthly_sold_products[order(Month_bin),]
monthly_sold_products <- monthly_sold_products[, Mov_Avg_3 := rollmean(monthly_sold_products$Sold_Products, k=3, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_sold_products, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_3), lwd=1)+
ylab("Moving Avg (Sold Products)")+
ggtitle("Moving Average of Monthly Sold Products", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Dataset exploration
library(zoo)
monthly_revenues <- monthly_revenues[order(Month_bin),]
monthly_revenues <- monthly_revenues[, Mov_Avg_3 := rollmean(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_3), lwd=1)+
ylab("Moving Avg (Total Revenues)")+
ggtitle("Moving Average of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Rolling Median
monthly_sold_products <- monthly_sold_products[, Mov_Med_3 := rollmedian(monthly_revenues$Sold_Products, k=3, fill=NA, align = "center")]
ggplot(monthly_sold_products, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Sold Products)")+
ggtitle("Rolling Median of Monthly Sold Products", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Rolling Median
monthly_sold_products <- monthly_sold_products[, Mov_Med_3 := rollmedian(monthly_revenues$Sold_Products, k=3, fill=NA, align = "center")]
ggplot(monthly_sold_products, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Sold Products)")+
ggtitle("Rolling Median of Monthly Sold Products", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Rolling Median
library(zoo)
monthly_sold_products <- monthly_sold_products[, Mov_Med_3 := rollmedian(monthly_revenues$Sold_Products, k=3, fill=NA, align = "center")]
ggplot(monthly_sold_products, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Sold Products)")+
ggtitle("Rolling Median of Monthly Sold Products", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Rolling Median
monthly_sold_products <- monthly_sold_products[, Mov_Med_3 := rollmedian(monthly_sold_products$Sold_Products, k=3, fill=NA, align = "center")]
ggplot(monthly_sold_products, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Sold Products)")+
ggtitle("Rolling Median of Monthly Sold Products", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Rolling Sum
monthly_sold_products <- monthly_sold_products[, Mov_Sum_3 := rollsum(monthly_sold_products$Sold_Products, k=3, fill=NA, align = "center")]
ggplot(monthly_sold_products, aes(x=Month_bin))+
geom_line(aes(y=Mov_Sum_3), lwd=1)+
ylab("Rolling Sum (Sold Products)")+
ggtitle("Rolling Sum of Monthly Sold Products", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Variable creation
revenues = revenues[, revenues_per_sold_product := Total_Revenue/Sold_Products]
head(revenues)
#| label: Variable creation
revenues = revenues[, Revenues_Per_Sold_Product := Total_Revenue/Sold_Products]
head(revenues)
revenues = revenues[, revenues_per_sold_product = NULL]
#| label: Variable creation
revenues = revenues[, Revenues_Per_Sold_Product := Total_Revenue/Sold_Products]
revenues = revenues[, revenues_per_sold_product := NULL]
head(revenues)
#| label: Daily aggregation
revenues <- revenues[, Day := as.Date(registered_at)]
# Now we just have to sum the revenues_
daily_RPSP <- revenues[, sum(Revenues_Per_Sold_Product), by=Day]
# Rename the sum column and visualize
names(daily_RPSP)[2] <- "Revenue_Per_Sold_Product"
ggplot(daily_RPSP, aes(x=Day))+
geom_line(aes(y=Revenue_Per_Sold_Product))+
theme_bw()
#| label: Monthly aggregation
#|
# We can create a date with the function make_date
make_date(year=2011, month =1, day=1)
# And create a sequence using the make_date function
obs_months <- seq(from = make_date(year=2011, month =1, day=1),
to=make_date(year=2017, month =1, day=1),
by="1 month")
obs_months
# Let's bin our dates using obs_months
revenues <- revenues[, Month_bin := cut(x=Day, breaks=obs_months,
include.lowest=TRUE)]
# And repeat the sum by Month_bin
monthly_RPSP <- revenues[, sum(Revenues_Per_Sold_Product), by=Month_bin]
# Rename the sum column and visualize
names(monthly_RPSP)[2] <- "Revenue_Per_Sold_Product"
# The last thing to do is to convert our Month_bin variable to Date, since it is
# a character variable
monthly_RPSP <- monthly_RPSP[, Month_bin:= as.Date(Month_bin)]
ggplot(monthly_RPSP, aes(x=Month_bin))+
geom_line(aes(y=Revenues_Per_Sold_Product))+
theme_bw()
#| label: Monthly aggregation
#|
# We can create a date with the function make_date
make_date(year=2011, month =1, day=1)
# And create a sequence using the make_date function
obs_months <- seq(from = make_date(year=2011, month =1, day=1),
to=make_date(year=2017, month =1, day=1),
by="1 month")
obs_months
# Let's bin our dates using obs_months
revenues <- revenues[, Month_bin := cut(x=Day, breaks=obs_months,
include.lowest=TRUE)]
# And repeat the sum by Month_bin
monthly_RPSP <- revenues[, sum(Revenues_Per_Sold_Product), by=Month_bin]
# Rename the sum column and visualize
names(monthly_RPSP)[2] <- "Revenue_Per_Sold_Product"
# The last thing to do is to convert our Month_bin variable to Date, since it is
# a character variable
monthly_RPSP <- monthly_RPSP[, Month_bin:= as.Date(Month_bin)]
ggplot(monthly_RPSP, aes(x=Month_bin))+
geom_line(aes(y=Revenue_Per_Sold_Product))+
theme_bw()
#| label: Rolling average
library(zoo)
monthly_RPSP <- monthly_RPSP[order(Month_bin),]
monthly_RPSP <- monthly_RPSP[, Mov_Avg_3 := rollmean(monthly_RPSP$Revenue_Per_Sold_Product, k=3, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_RPSP, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_3), lwd=1)+
ylab("Moving Avg (Revenue per Sold Product)")+
ggtitle("Moving Average of Monthly Revenue per sold product", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Rolling Median
monthly_RPSP <- monthly_RPSP[, Mov_Med_3 := rollmedian(monthly_RPSP$Revenue_Per_Sold_Product, k=3, fill=NA, align = "center")]
ggplot(monthly_RPSP, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Revenue per Sold Product)")+
ggtitle("Rolling Median of Monthly Revenue per Sold Product", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
#| label: Rolling Sum
monthly_RPSP <- monthly_RPSP[, Mov_Sum_3 := rollsum(monthly_RPSP$Revenue_Per_Sold_Product, k=3, fill=NA, align = "center")]
ggplot(monthly_RPSP, aes(x=Month_bin))+
geom_line(aes(y=Mov_Sum_3), lwd=1)+
ylab("Rolling Sum (Revenue per Sold Product)")+
ggtitle("Rolling Sum of Monthly Revenue per Sold Product", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
table1
mode(seg$date)
library(data.table)
getwd()
seg.raw <- read.csv('data/archive/sales.csv')
seg = as.data.table(seg.raw)
View(seg)
is.data.table(seg)
mode(seg$date)
colnames(seg)
seg_year = seg[, mean = mean(colnames(seg)), by=substr(date, 1, 4)]
seg_year = seg[, mean := mean(colnames(seg)), by=substr(date, 1, 4)]
seg_year = seg[, mean = mean(colnames(seg)), by=substr(date, 1, 4)]
colnames(seg)
seg_year = seg[, mean = mean(.('sales', 'views', 'price_cost', 'price_retail')), by=substr(date, 1, 4)]
seg_year = seg[, mean := mean(.('sales', 'views', 'price_cost', 'price_retail')), by=substr(date, 1, 4)]
seg_year = seg[, mean := mean(sales), by=substr(date, 1, 4)]
mode(seg$date)
colnames(seg)
seg_year = seg[, mean := mean(sales), by=substr(date, 1, 4)]
head(seg_year)
seg_year = seg[, mean = mean(sales), by=substr(date, 1, 4)]
seg_year = seg[, mean(sales), by=substr(date, 1, 4)]
head(seg_year)
colnames(seg)
seg_year = seg[, mean(sales, views), by=substr(date, 1, 4)]
seg_year = seg[, mean(.(sales, views)), by=substr(date, 1, 4)]
seg_year = seg[, mean(sales, views), by=substr(date, 1, 4)]
head(seg_year)
is.numeric(colnames(seg))
seg_year = seg[, mean(as.numeric(views)), by=substr(date, 1, 4)]
head(seg_year)
colnames(seg)
seg_year = seg[, mean(as.numeric(.(views, sales))), by=substr(date, 1, 4)]
aggregate(x = seg, by = substr(x = date, 1, 4), FUN = mean())
aggregate(x = seg, by = substr(x = date, 1, 4), FUN = mean
head(seg_year)
aggregate(x = seg, by = substr(x = date, 1, 4), FUN = mean)
mode(seg$date)
aggregate(x = seg, by = substr(x = date, 1, 4), FUN = mean)
aggregate(x = seg, by = substr(x = date, 1, 4), FUN = function(x) {mean(as.numeric(x))})
colnames(seg)
seg_year = seg[, .(mean_sales := mean(sales), mean_views := mean(views), mean_price_cost := mean(price_cost), mean_price_retail := mean(price_retail), by = substr(date, 1, 4)]
seg_year = seg[, .(mean_sales := mean(sales), mean_views := mean(views), mean_price_cost := mean(price_cost), mean_price_retail := mean(price_retail)), by = substr(date, 1, 4)]
getwd()
seg.raw <- read.csv('data/archive/sales.csv')
seg = as.data.table(seg.raw)
is.data.table(seg)
mode(seg$date)
colnames(seg)
seg_year = seg[, .(mean_sales := mean(sales), mean_views := mean(views), mean_price_cost := mean(price_cost), mean_price_retail := mean(price_retail)), by = substr(date, 1, 4)]
seg_year = seg[, .(mean_sales = mean(sales), mean_views = mean(views), mean_price_cost = mean(price_cost), mean_price_retail = mean(price_retail)), by = substr(date, 1, 4)]
head(seg_year)
seg_distance_sales = seg[, dist = dist(sales), by = substr(date, 1, 7)]
seg_distance_sales = seg[, dist := dist(sales), by = substr(date, 1, 7)]
install.packages('cluster')
seg_dist = daisy(seg_year)
seg_dist = cluster.daisy(seg_year)
seg_dist = cluster::daisy(seg_dist)
seg_dist = cluster::daisy(seg_year)
seg_dist = cluster::daisy(seg_year[1, ])
seg_dist = cluster::daisy(seg_year[2, ])
seg_dist = cluster::daisy(seg_year[2, 5])
seg_dist
as.matrix(seg_dist)
seg_dist = cluster::daisy(seg[2, 5])
seg_dist
as.matrix(seg_dist)
dist(seg_year)
cluster::daisy(seg_yaer)
cluster::daisy(seg_year)
cluster::daisy(seg_year[2:5])
cluster::daisy(seg_year[, 2:5])
cluster::daisy(seg_year[, 2:5], metric = 'gower')
cluster::daisy(seg[, is.numeric], metric = 'gower')
library(dplyr)
install.packages('dplyr')
#install.packages('dplyr')
library(dplyr)
cluster::daisy(seg[, select_if(colnames(seg), is.numeric)], metric = 'gower')
cluster::daisy(seg[, as.numeric(select_if(colnames(seg), is.numeric))], metric = 'gower')
#install.packages('dplyr')
library(dplyr)
dist(seg_year)
cluster::daisy(seg[, as.numeric(select_if(colnames(seg), is.numeric))], metric = 'gower')
cluster::daisy(seg[, as.numeric(select_if(colnames(seg), is.numeric))], metric = 'gower')
select_if(colnames(seg), is.numeric)
select_if(colnames(seg), is.numeric)
colnames(seg)
select_if(colnames(seg_year), is.numeric)
select_if(seg_year, is.numeric)
select_if(seg, is.numeric)
cluster::daisy(seg[, select_if(seg, is.numeric)], metric = 'gower')
cluster::daisy(seg[, unlist(lapply(data, is.numeric))], metric = 'gower')
cluster::daisy(seg[, unlist(lapply(seg_year, is.numeric))], metric = 'gower')
cluster::daisy(seg[, unlist(lapply(seg, is.numeric))], metric = 'gower')
seg_year[, unlist(lapply(seg, is.numeric))]
seg_year[, unlist(lapply(seg_year, is.numeric))]
seg[, unlist(lapply(seg_year, is.numeric))]
seg_year[, unlist(lapply(seg_year, is.numeric))]
unlist(lapply(seg_year, is.numeric))
unlist(lapply(seg_year, is.numeric))
lapply(seg_year, is.numeric)
unlist(lapply(seg_year, is.numeric))
seg_year[, unlist(lapply(seg_year, is.numeric))]
head(seg_year[, unlist(lapply(seg_year, is.numeric))])
seg_year[, unlist(lapply(seg_year, is.numeric), use.names = FALSE)]
seg_year[, .SD, .SDcols = is.numeric]
cluster::daisy(seg[, .SD, .SDcols = is.numeric], metric = 'gower')
cluster::daisy(seg_year[, .SD, .SDcols = is.numeric], metric = 'gower')
load("~/Dropbox/_Didattica/R_Slides/PIXAR/posts_disneypixar.rdata")
load("data/posts_disneypixar.rdata")
getwd()
setwd('/home/pachy/Desktop/ACSAI/acsai/Data Management/Class/networks_igraph/scripts')
load("data/posts_disneypixar.rdata")
load("data/likes_disneypixar.rdata")
load("data/comments_disneypixar.rdata")
head(posts)
head(likes)
head(comments)
library(igraph)
edges = data.frame("from" = likes$post_id, "to" = likes$from_id, stringsAsFactors = F )
g <- graph.data.frame(edges, directed = F)
V(g)$type <- V(g)$name %in% edges[,2]
#313077 nodes are LIKERS - node marked as TRUE - length(V(g)[type == "TRUE"])
#576 nodes are POSTS - node marked as FALSE  length(V(g)[type == "FALSE"])
g_like = g  #from now on g_like is the bipartite for likes - posts
edges = data.frame("from" = comments$post_id[1:5000], "to" = comments$from_id[1:5000], stringsAsFactors = F )
g <- graph.data.frame(edges, directed = F)
V(g)$type <- V(g)$name %in% edges[,2]
#40918 nodes are COMMENTS - node marked as TRUE - length(V(g)[type == "TRUE"])
#573 nodes are POSTS - node marked as FALSE  length(V(g)[type == "FALSE"])
g_comm = g #from now on g_comm is the bipartite for comments - posts
g = g_comm
#USE TO SEE THE BIPARTITE (TIME CONSUMING)
V(g)$color <- V(g)$type
V(g)$color=gsub("FALSE","red",V(g)$color)
V(g)$color=gsub("TRUE","blue",V(g)$color)
pdf("TEST_BIPARTITE.pdf")
V(g)$color <- ifelse(V(g)$type, "lightblue", "salmon")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
E(g)$color <- "lightgray"
plot(g, vertex.label.cex = 0.2,
vertex.label.color = "black",
vertex.label = "NA",
edge.width=0.5,
edges.size = 0.1,
vertex.size = 0.1,
edge.lty = 2,
edge.curved = TRUE,
layout=layout_as_bipartite)
#plot(g, edge.color="gray30",edge.width=E(g)$weight, layout=layout_as_bipartite,
#vertex.label = "NA")
#grid(col = "dodgerblue4")
dev.off()
#ANALYZING THE BIPARTITE: some metrics
types <- V(g)$type                 ## getting each vertex `type` let's us sort easily
deg <- degree(g)
bet <- betweenness(g)
clos <- closeness(g)
eig <- eigen_centrality(g)$vector
cent_df <- data.frame(types, deg, bet, clos, eig)
cent_df[order(cent_df$type, decreasing = TRUE),] ## sort w/ `order` by `type`
#PLOT PROBABILITY DENSITY FUNCTION OF BET OR CLOS OR EIG
plot(density(bet), log = "xy",lty = 6)
plot(density(clos), log = "xy",lty = 6)
plot(density(eig), log = "xy",lty = 6)
#JUST IN CASE YOU WANT TO PLOT IT (WITH NODE SIZE PROPORTIONAL TO THE DEGREE)
pdf("TEST_BIPARTITE_1.pdf")
V(g)$color <- ifelse(V(g)$type, "lightblue", "salmon")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
V(g)$size <- degree(g)
V(g)$label.cex <- degree(g) * 0.2
E(g)$color <- "lightgray"
plot(g, vertex.label.cex = 0.2,
vertex.label.color = "black",
vertex.label = "NA",
edge.width=0.5,
edges.size = 0.1,
edge.lty = 2,
edge.curved = TRUE,
layout=layout_as_bipartite)
#plot(g, edge.color="gray30",edge.width=E(g)$weight, layout=layout_as_bipartite,
#vertex.label = "NA")
#grid(col = "dodgerblue4")
dev.off()
