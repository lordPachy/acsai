array = c(112, 121, 126, 108, 141, 104, 136, 134, 121, 118, 143, 116, 108, 122, 127, 140, 113, 117, 126, 130, 134, 120, 131, 133, 118, 125, 151, 147, 137, 140, 132, 119, 110, 124, 132, 152, 135, 130, 136, 128)
array.mean()
array.mean
mean(array)
mode(array)
library(modeest)
install.packages(modeest)
install.packages("modeest")
install.packages("gss")
install.packages("gss")
install.packages("-llapack")
install.packages("gss")
install.packages("modeest")
mlv(array)
modeest::mfv(array)
mfv(array)
modeest::mlv(array)
modeest::mfv(array)
modeest::mfv1(array)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(array)
median(array)
hist(array)
hist(array, freq = FALSE)
#Exercise 21
array = c(114, 114, 114, 113, 111, 97, 94, 66, 63, 52, 48, 33)
mean(array)
?var()
?var()
var(array, use = all.obs)
var(array)
#Exercise 26
array = c(3.46, 3.72, 3.95, 3.55, 3.62, 3.80, 3.86, 3.71, 3.56, 3.49, 3.96, 3.90, 3.70, 3.61,
3.72, 3.65, 3.48, 3.87, 3.82, 3.91, 3.69, 3.67, 3.72, 3.66, 3.79, 3.75, 3.93, 3.74,
3.50, 3.83)
mean(array)
var(array)
sqrt(var(array))
#This is used to read Microsoft Excel files
install.packages("readxl")
library(readxl)
#Let's import data from Microsoft Excel
ageandheight = read_excel("ageandheight.xls", sheet = "Hoja2")
#Let's import data from Microsoft Excel
ageandheight = read_excel("/ageandheight.xls", sheet = "Hoja2")
#Let's import data from Microsoft Excel
getwd()
setwd("Desktop/ACSAI/acsai/Data Management/")
setwd("Desktop/ACSAI/acsai/Data Management")
setwd("Desktop/ACSAI/acsai/Data Management/")
#Let's import data from Microsoft Excel
getwd()
setwd("Desktop/ACSAI/acsai/Data Management/")
setwd("Desktop/ACSAI/acsai/Data Management/Home practice")
setwd("~/Desktop/ACSAI/acsai/Data Management/Home practice")
setwd("~/Desktop/ACSAI/acsai/Data Management/Home practice/")
ageandheight = read_excel("ageandheight.xls", sheet = "Hoja2")
#Linear regression
lmHeight = lm(height~age, data = ageandheight)
summary(lmHeight)
head(ageandheight)
summary(ageandheight)
#Linear regression
lmHeight = lm(height ~ age, data = ageandheight)
summary(lmHeight)
ageandheight
ageandheight[7]
ageandheight[1][7]
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
ageandheight  #there is an error at observation 7: let-s fix it
rows_update(ageandheight, tibble(age=24, height=79.9, no_siblings=5))
ageandheight
ageandheight = rows_update(ageandheight, tibble(age=24, height=79.9, no_siblings=5))
ageandheight
#Linear regression
lmHeight = lm(height ~ age, data = ageandheight)
summary(lmHeight)
summary(lmHeightmul)
#Multiple linear regression
lmHeightmul = lm(height ~ age + no_siblings, data = ageandheight)
summary(lmHeightmul)
library(ggplot2)
ggplot(data = ageandheight, mapping = aes(x=age, y = height)) + geom_point()
ggplot(data = ageandheight, mapping = aes(x=age, y = height)) + geom_point() + lmHeight
warning()
warnings()
#Sections 1.1-1.2
library(tidyverse)
#Sections 1.1-1.2
install.packages("tidyverse")
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
library(ggplot2)
ggplot(data = ageandheight, mapping = aes(x=age, y = height)) + geom_point() + geom_smooth(method = lm)
#Exercise 2: pressure and temperature
pressure = read_excel("pressure.xls")
#Exercise 2: pressure and temperature
pressure = read_excel("pressure.xlsx")
head(pressure)
summary(pressure)
pressure
lmTemp = lm(Pressure ~ Temperature, data = pressure)
summary(lmTemp)
plot(pressure, pch=16, col="blue")
plot(pressure, pch=16, col="blue")
abline(lmTemp)
plot(lmTemp$residuals, pch = 16, col = "red")
#There is a precise pattern in the residuals.
#It is the second order function missing from the linear fit.
#If the problem is actually linear, the residuals are random.
#This can be fixed:
lm_temp_quadratic = lm(Pressure ~ Temperature + I(Temperature^2), data = pressure)
summary(lm_temp_quadratic)
plot(lm_temp_quadratic$residuals, pch=16, col="green")
#INFLUENTIAL POINTS
#It is possible to detect outliers by using the Cooks distance, and by plotting it.
ageandheight[2, 2] = 7.7
head(ageandheight)
ageandheight  #there is an error at observation 7: let's fix it
ageandheight[7, 2] = 79.9
#INFLUENTIAL POINTS
#It is possible to detect outliers by using the Cooks distance, and by plotting it.
ageandheight[2, 2] = 7.7
head(ageandheight)
#Doing a (bad) lm
bad_height_lm = lm(height ~ age, data = ageandheight)
summary(bad_height_lm)
plot(cooks.distance(bad_height_lm), pch = 16, col = "blue")
#Sections 1.3-
ggplot(penguins, aes(x= flipper_length_mm, y=body_mass_g)) + geom_point()
penguins |> ggplot(aes(x = flipper_length_mm, y = body_mass_g))
penguins |> ggplot(aes(x = flipper_length_mm, y = body_mass_g)) + geom_point()
ggplot(penguins, aes(x=species)) + geom_bar()
#Bar charts
ggplot(penguins, aes(x=species)) + geom_bar()
#To have it ordered on the base of frequency, it is possible to transform to a factor:
ggplot(penguins, aes(x=fct_infreq(species))) + geom_bar()
#Histograms
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(binwidth = 200)
#Density plots
ggplot(penguins, aes(x = body_mass_g)) + geom_density()
#EXERCISES 1.4.3
#Exercise 1
ggplot(penguins, aes(y = species)) + geom_bar()
#Exercise 2
ggplot(penguins, aes(x = species)) +
geom_bar(color = "red")
ggplot(penguins, aes(x = species)) +
geom_bar(fill = "red")
#Exercise 3
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(bins = 30000)
#Exercise 3
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(bins = 300)
source("~/Desktop/ACSAI/acsai/Data Management/R for Data Science/1 Data Visualization.R", echo=TRUE)
#Exercise 3
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(bins = 3)
#Exercise 3
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(bins = 2)
#Exercise 3
ggplot(penguins, aes(x = body_mass_g)) + geom_histogram(bins = 1)
#Exercise 4
ggplot(diamonds, aes(x = carat)) + geom_histogram(carat, binwidth = 20)
#Exercise 4
library(tidyverse)
ggplot(diamonds, aes(x = carat)) + geom_histogram(carat, binwidth = 20)
summary(diamonds)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 20)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 1)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 2)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 200)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 1)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.001)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.01)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.05)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.1)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.01)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.1)
ggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.5)
#SECTIONS 1.5-
#Boxplots
ggplot(penguins, aes(x = species, y = body_mass_g)) + geom_boxplot()
ggplots(penguins, aes(x = body_mass_g, color = species)) + geom_density(linewidth = 0.75)
ggplot(penguins, aes(x = body_mass_g, color = species)) + geom_density(linewidth = 0.75)
#Density plots filled and with transparency
ggplot(penguins, aes(x = body_mass_g, color = species, fill=species)) + geom_density(alpha = 0.5)
#Stacked bar plots
ggplot(penguins, aes(x = island, fill = species)) + geom_bar()
ggplot(penguins, aes(x = island, fill = species)) + geom_bar(position = "fill")
#Three variables in a graph
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = island)) +
geom_point()
#Three variables in a graph
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = island)) +
geom_point()
#Facets
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_point(aes(color = species, shape = species)) + facet_wrap(~island)
