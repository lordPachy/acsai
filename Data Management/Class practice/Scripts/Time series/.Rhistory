merged_dt
dt
dt[, birth_year:= rep("2001", nrow(dt))]
dt[, birth_year:= rep("2001", nrow(dt))]
dt
grouped_dt = dt[, .(mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt = dt[, .(mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt
grouped_dt = dt[, (mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt = dt[, .(mean_age = mean(age), max_age = max(age)), by = name]
grouped_dt
#| label: Missing values
dt[is.na(age), age := 0]
dt
#| label: Missing values
dt[is.na(age), age := 0]
#| label: Missing values
dt[is.na(age), age := 0]
dt[age<30, can_vote := "Yes"]
dt
result = dt[age>30][, .(mean_age=mean(age)), by=name]
result
result = dt[age>30, .(mean_age=mean(age), by = name)]
result
result = dt[age>30, .(mean_age=mean(age)), by = name]
result
result = dt[age>30&&can_vote "Yes", .(mean_age=mean(age)), by = name]
result = dt[age>30&&can_vote == "Yes", .(mean_age=mean(age)), by = name]
result = dt[age>30&&can_vote == "No", .(mean_age=mean(age)), by = name]
result = dt[age<30&&can_vote == "Yes", .(mean_age=mean(age)), by = name]
result = dt[age<30&can_vote == "Yes", .(mean_age=mean(age)), by = name]
result
#| label: Adding entries
v = data.frame("id" = dt[, max(id)], "name" = "john", "age" = 41, "birth_year" = 2050, "can_vote" = "no")
dt = rbind(dt, v)     #this is for uniting the two
dt
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Time Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Time Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Time Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data\ Management/Class practice/Scripts/Time\ Series")
#| label: Setting up
setwd("/home/pachy/Desktop/ACSAI/acsai/Data\ Management/Class practice/Scripts/Time\ Series")
#| label: Setting up
getwd()
large_dt = fread("LEZ_4_large_dataset.csv")
large_dt = fread("LEZ_4_large_dataset.csv")
ncol(large_dt)
colnames(large_dt)
large_dt[, .N, by = type]
View(large_dt)
large_dt[, .N, by = type]
#| label: Writing to an external table
fwrite(large_dt, "output.csv")
unique_dt  = unique(large_dt)
column_sum = large_dt[, cum_sum := cumsum(alt)]
column_sum
large_dt[, age_category := ifelse(age < 30, "Young", "Adult")]
#| label: Sampling
sample_dt = large_dt[sample(.N, 100)]
sample_dt
#| label: Sampling with indices
sample_dt = large_dt[large_dt[alt<1000, sample(.N, 100)]]
#| label: Sampling with indices
sample_dt = large_dt[large_dt[alt<1000, sample(.N, 100)]]
sample_dt
install.packages("data.tables", "AER"
install.packages("data.tables", "AER")
install.packages("data.tables")
install.packages("AER")
install.packages("data.table")
install.packages("AER")
#install.packages("data.table")
#install.packages("AER")
library(data.table)
library(AER)
#install.packages("data.table")
#install.packages("AER")
library(data.table)
library("AER")
#install.packages("data.table")
install.packages("AER")
library(data.table)
library("AER")
library(AER)
#install.packages("data.table")
install.packages("AER")
library(data.table)
library(AER)
install.packages("data.table")
#install.packages("AER")
library(data.table)
library(AER)
data("Fertility")
dt = setDT(Fertility)
View(dt)
dt[35:50][, .(age, work)]
dt[length(dt)]
dt[morekids=="yes", .N]
dt[, .N, by = .(gender1, gender2)]
length(dt)
dt[work <= 4, .(proportion = .N/nrow(dt) * 100), by = .(afam, hispanic, other)]
dt[age %between% c(22, 24), .(proportion = .N/nrow(dt[age %between% c(22, 24)])),by = gender1]
dt[, age_squared := age ^ 2]
dt
dt[, .(.N, prop = mean(gender1=="male")), by = .(afam, hispanic, other)]
dt[, .(prop = mean(morekids == "yes")), by = .(gender1, gender2)]
dt
dt[work <= 4, .(proportion := .N/nrow(dt) * 100), by = .(afam, hispanic, other)]
dt[work <= 4, .(proportion = .N/nrow(dt) * 100), by = .(afam, hispanic, other)]
dt[, .(.N, prop = mean(gender1=="male")), by = .(afam, hispanic, other)][which.min(prop_m)]
dt[, .(.N, prop = mean(gender1=="male")), by = .(afam, hispanic, other)][which.min(prop)]
# Load data with fread
getwd()
dir = "/home/pachy/Desktop/ACSAI/acsai/Data Management/Class practice/Scripts/Time series"
setwd(dir)
tc <- fread("toy_cor.csv")
tc <- fread("toy_cor.csv", fill=T)    #it is already in the data table class
head(tc)
tc[, lapply(.SD, mean), .SDcols = 18:35]  #.SD returns the column specified by .SDcols = 18:35
install.packages("astsa")
install.packages(("xts"))
library(astsa)
# This is a time series
plot(jj, type="o", ylab="Quarterly Earnings per Share")
library(xts)
djiar = diff(log(djia$Close))[-1] # approximate returns
plot(djiar, main="DJIA Returns", type="n")
lines(djiar)
par(mfrow = c(2,1)) # set up the graphics
plot(soi, ylab="", xlab="", main="Southern Oscillation Index")
plot(rec, ylab="", xlab="", main="Recruitment")
class(revenues$registered_at)
library(data.table)
library(lubridate)
revenues <- fread("revenues.csv")
View(revenues)
install.packages("astsa")
install.packages(("xts"))
library(astsa)
# This is a time series
plot(jj, type="o", ylab="Quarterly Earnings per Share")
install.packages(("xts"))
install.packages("astsa")
# Let's see how to extract specific time units
# This is our datetime
revenues$registered_at[1]
# If you want to extract the Year
year(revenues$registered_at[1])
# Month
month(revenues$registered_at[1])
# Day
day(revenues$registered_at[1])
# Hour:
hour(revenues$registered_at[1])
# Minutes
minute(revenues$registered_at[1])
# Seconds
second(revenues$registered_at[1])
############# 1) TIME DIFFERENCES
# Dealing with time differences can be a little tricky
# let's see how to do it
revenues$registered_at[1] - revenues$registered_at[2]
# If we subtract two datetime values we obtain a "Time difference of X days"
revenues$registered_at[3498] - revenues$registered_at[990]
# If the datetimes are closer than one day,
#we obtain a time difference of X hours, minutes or seconds
class(revenues$registered_at[3498] - revenues$registered_at[990])
# Let's try
# I want to compute the time difference of my observations from the minimum
# observed date
min_obs_date <- revenues[,min(registered_at)]
# Create the variable
revenues <- revenues[, Time_diff := registered_at-min_obs_date]
head(revenues$Time_diff)
# Our differences have been automatically converted to seconds
# But I want only the number of days
revenues <- revenues[, Time_diff := as.period(registered_at-min_obs_date, "days")]
head(revenues$Time_diff)
# Now let's extract the day
revenues <- revenues[, Time_diff := day(Time_diff)]
head(revenues$Time_diff)
class(revenues$Time_diff)
# Our variable is now numeric,
#and we don't have to deal with time classes anymore :)
############ 2) AGGREGATE
# Let's look at our time-series
library(ggplot2)
ggplot(revenues, aes(x=registered_at))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
# It is a little bit difficult to visualize in its current form
# Let's see how to aggregate rows based on their time
# I want to compute the daily sum of Total Revenues
# The most simple way to do it is to create a Day variable
# and aggregate the Total_Revenues using data.table
# We already did the first step as:
revenues <- revenues[, Day := as.Date(registered_at)]
# Now we just have to sum the Total_Revenues
daily_revenues <- revenues[, sum(Total_Revenue), by=Day]
# Rename the sum column and visualize
names(daily_revenues)[2] <- "Total_Revenue"
ggplot(daily_revenues, aes(x=Day))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
# It is a little bit cleaner now, but not enough
# Let's try to calculate the Monthly sum
# We are going to create a vector of Months and use it to bin the dates
revenues[,min(Day)]
revenues[,max(Day)]
# Now we know that our vector has to start in 2011-01-01 and to end in
# 2017-01-01
# We can create a date with the function make_date
make_date(year=2011, month =1, day=1)
# And create a sequence using the make_date function
obs_months <- seq(from = make_date(year=2011, month =1, day=1),
to=make_date(year=2017, month =1, day=1),
by="1 month")
obs_months
# Let's bin our dates using obs_months
revenues <- revenues[, Month_bin := cut(x=Day, breaks=obs_months,
include.lowest=TRUE)]
# And repeat the sum by Month_bin
monthly_revenues <- revenues[, sum(Total_Revenue), by=Month_bin]
# Rename the sum column and visualize
names(monthly_revenues)[2] <- "Total_Revenue"
# The last thing to do is to convert our Month_bin variable to Date, since it is
# a character variable
monthly_revenues <- monthly_revenues[, Month_bin:= as.Date(Month_bin)]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
# It is definitely clearer now, let's make the plot better
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Total_Revenue), lwd=1)+
xlab("Month")+
ylab("Total Revenue")+
ggtitle("Monthly Total Revenues")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
########### 3 - Moving Average
# We can smooth the time series by computing the Moving Average of its values
# Given a window width, the moving average is the average of the values in that window
library(zoo)
monthly_revenues <- monthly_revenues[order(Month_bin),]
monthly_revenues <- monthly_revenues[, Mov_Avg_3 := rollmean(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_3), lwd=1)+
ylab("Moving Avg (Total Revenues)")+
ggtitle("Moving Average of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
# Let's try with a broader window: 5
monthly_revenues <- monthly_revenues[, Mov_Avg_5 := rollmean(monthly_revenues$Total_Revenue, k=5, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_5), lwd=1)+
ylab("Rolling Avg (Total Revenues)")+
ggtitle("Rolling Average of Monthly Total Revenues", subtitle = "Window width = 5")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
# We can also compute the rolling median, sum, and maximum
# Median
monthly_revenues <- monthly_revenues[, Mov_Med_3 := rollmedian(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Total Revenues)")+
ggtitle("Rolling Median of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
# Sum
monthly_revenues <- monthly_revenues[, Mov_Sum_3 := rollsum(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Sum_3), lwd=1)+
ylab("Rolling Sum (Total Revenues)")+
ggtitle("Rolling Sum of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
# Maximum
monthly_revenues <- monthly_revenues[, Mov_Max_3 := rollmax(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Max_3), lwd=1)+
ylab("Rolling Max (Total Revenues)")+
xlab("Month")+
ggtitle("Rolling Max of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
####### Exercices
# Repeat Daily and Monthly aggregation, and their rolling average, median and sum for:
# 1) Sold Products
# 2) Revenue per Sold Products (Create a variable as Total Revenue/Sold Products)
View(revenues)
# Let's look at our time-series
library(ggplot2)
ggplot(revenues, aes(x=registered_at))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
# It is a little bit difficult to visualize in its current form
# Let's see how to aggregate rows based on their time
# I want to compute the daily sum of Total Revenues
# The most simple way to do it is to create a Day variable
# and aggregate the Total_Revenues using data.table
# We already did the first step as:
revenues <- revenues[, Day := as.Date(registered_at)]
# Now we just have to sum the Total_Revenues
daily_revenues <- revenues[, sum(Total_Revenue), by=Day]
# Rename the sum column and visualize
names(daily_revenues)[2] <- "Total_Revenue"
ggplot(daily_revenues, aes(x=Day))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
# It is a little bit cleaner now, but not enough
# Let's try to calculate the Monthly sum
# We are going to create a vector of Months and use it to bin the dates
revenues[,min(Day)]
revenues[,max(Day)]
# Now we know that our vector has to start in 2011-01-01 and to end in
# 2017-01-01
# We can create a date with the function make_date
make_date(year=2011, month =1, day=1)
# And create a sequence using the make_date function
obs_months <- seq(from = make_date(year=2011, month =1, day=1),
to=make_date(year=2017, month =1, day=1),
by="1 month")
obs_months
# Let's bin our dates using obs_months
revenues <- revenues[, Month_bin := cut(x=Day, breaks=obs_months,
include.lowest=TRUE)]
# And repeat the sum by Month_bin
monthly_revenues <- revenues[, sum(Total_Revenue), by=Month_bin]
# Rename the sum column and visualize
names(monthly_revenues)[2] <- "Total_Revenue"
# The last thing to do is to convert our Month_bin variable to Date, since it is
# a character variable
monthly_revenues <- monthly_revenues[, Month_bin:= as.Date(Month_bin)]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
# It is definitely clearer now, let's make the plot better
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Total_Revenue), lwd=1)+
xlab("Month")+
ylab("Total Revenue")+
ggtitle("Monthly Total Revenues")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
# Let's look at our time-series
library(ggplot2)
ggplot(revenues, aes(x=registered_at))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
revenues <- revenues[, Day := as.Date(registered_at)]
# Now we just have to sum the Total_Revenues
daily_revenues <- revenues[, sum(Total_Revenue), by=Day]
# Rename the sum column and visualize
names(daily_revenues)[2] <- "Total_Revenue"
ggplot(daily_revenues, aes(x=Day))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
revenues[,min(Day)]
revenues[,max(Day)]
# Now we know that our vector has to start in 2011-01-01 and to end in
# 2017-01-01
# We can create a date with the function make_date
make_date(year=2011, month =1, day=1)
# And create a sequence using the make_date function
obs_months <- seq(from = make_date(year=2011, month =1, day=1),
to=make_date(year=2017, month =1, day=1),
by="1 month")
obs_months
# Let's bin our dates using obs_months
revenues <- revenues[, Month_bin := cut(x=Day, breaks=obs_months,
include.lowest=TRUE)]
# And repeat the sum by Month_bin
monthly_revenues <- revenues[, sum(Total_Revenue), by=Month_bin]
# Rename the sum column and visualize
names(monthly_revenues)[2] <- "Total_Revenue"
# The last thing to do is to convert our Month_bin variable to Date, since it is
# a character variable
monthly_revenues <- monthly_revenues[, Month_bin:= as.Date(Month_bin)]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Total_Revenue))+
theme_bw()
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Total_Revenue), lwd=1)+
xlab("Month")+
ylab("Total Revenue")+
ggtitle("Monthly Total Revenues")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
library(zoo)
monthly_revenues <- monthly_revenues[order(Month_bin),]
monthly_revenues <- monthly_revenues[, Mov_Avg_3 := rollmean(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_3), lwd=1)+
ylab("Moving Avg (Total Revenues)")+
ggtitle("Moving Average of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Avg_5 := rollmean(monthly_revenues$Total_Revenue, k=5, fill=NA, align = "center")]
# k is the width of the rolling window
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Avg_5), lwd=1)+
ylab("Rolling Avg (Total Revenues)")+
ggtitle("Rolling Average of Monthly Total Revenues", subtitle = "Window width = 5")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Med_3 := rollmedian(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Med_3), lwd=1)+
ylab("Rolling Median (Total Revenues)")+
ggtitle("Rolling Median of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Sum_3 := rollsum(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Sum_3), lwd=1)+
ylab("Rolling Sum (Total Revenues)")+
ggtitle("Rolling Sum of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
monthly_revenues <- monthly_revenues[, Mov_Max_3 := rollmax(monthly_revenues$Total_Revenue, k=3, fill=NA, align = "center")]
ggplot(monthly_revenues, aes(x=Month_bin))+
geom_line(aes(y=Mov_Max_3), lwd=1)+
ylab("Rolling Max (Total Revenues)")+
xlab("Month")+
ggtitle("Rolling Max of Monthly Total Revenues", subtitle = "Window width = 3")+
theme_bw()+
theme(plot.title = element_text(size=18, hjust=0.5, face="bold"),
plot.subtitle = element_text(size=15, hjust=0.5, face="italic"),
axis.title = element_text(size=16, face="italic"),
axis.text = element_text(size=14),
panel.background = element_blank(),
panel.grid = element_line(color="lightgrey"),
axis.ticks.length = unit(0.2, 'cm'))
