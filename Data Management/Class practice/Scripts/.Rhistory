#Exercise 6
ggplot(iris, aes(sample = Sepal.Width)) + geom_qq_line() + geom_qq()
data("iris")
library(ggplot2)
#Exercise 6
ggplot(iris, aes(sample = Sepal.Width)) + geom_qq_line() + geom_qq()
ggplot(iris, aes(sample = Sepal.Length)) + geom_qq_line() + geom_qq()
ggplot(iris, aes(sample = Petal.Width)) + geom_qq_line() + geom_qq()
#SECTIONS 3.1-
library(nycflights13)
#SECTIONS 3.1-
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(tidyverse) #View is useful to scroll datasets View(flights)
plot(cars)
quarto install tinytex
quarto install tinytex
pet_max = max(iris$Petal.Width)
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
x = seq(pet_min, pet_max, length.out = 150)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line()
data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length)) + geom_density()
x = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 100)
u = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
gauss = dnorm(x, mean = u, sd = v)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
#compare = pivot_longer(data = iris, cols = c("Sepal.Width", "Petal.Width"), names_to = "Specie", values_to = "Values")
t.test(iris$Sepal.Length, gauss)
#ks.test(iris$Sepal.Length, gauss)
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
x = seq(pet_min, pet_max, length.out = 150)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line()
#data = data.frame(x=rep(1:length(iris$Petal.Width),
#    variable=rep(paste0('series', 1:3), each=5))
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line() + theme_light()
pet_min = min(iris$Petal.Width)
pet_max = max(iris$Petal.Width)
x = seq(pet_min, pet_max, length.out = 150)
unif_pet = dunif(x, min = pet_min, max = pet_max)
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line() + theme_light()
ggplot(data.frame(x = x, y = unif_pet), aes(x=x, y=y,)) + geom_line() + theme_light() + xlab("Petal Width") + ylab("P(x)")
ggplot(iris, aes(Petal.Width)) + geom_bar
ggplot(iris, aes(Petal.Width)) + geom_bar()
ggplot() + geom_bar(data = iris, mapping = aes(x = Sepal.Length))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, colour = "red"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = "red"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = "red")) + geom_line(mapping = aes(x = x, y = unif_pet, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = "red")) + geom_line(mapping = aes(x = x, y = unif_pet, fill = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = "red")) + geom_line(mapping = aes(x = x, y = unif_pet, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(mapping = aes(x = x, y = unif_pet, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(mapping = aes(x = x, y = unif_pet, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(mapping = aes(x = x, y = unif_pet * mean(iris$Petal.Width), color = "blue"))
ggplot() + geom_bar(mapping = aes(x = Petal.Width, fill = Species)) + geom_line(mapping = aes(x = x, y = unif_pet * mean(iris$Petal.Width), color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * mean(iris$Petal.Width), color = "blue"))
mean(iris$Petal.Width)
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * n(iris), color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * N(iris), color = "blue"))
summary(iris)
length(iris)
lengths(iris)
length(iris$Petal.Width)
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width), color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)/2, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_hist(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)/2, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_histogram(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)/2, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_bar(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)/2, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_freqpoly(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)/2, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)/2, color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width), color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width), color = "blue"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width), color = "magenta"))
ggplot() + geom_bar(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)))
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y * length(iris$Petal.Width)))
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y))
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y, colour = "green"), inherit.aes = FALSE)
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "green")
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width), fill = Species) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "green")
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width), fill = iris$Species) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "green")
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "green")
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "green", show.legend = TRUE)
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "green")
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "black")
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "black") + legend(x = x)
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "black") + legend(x = x, legend = "ciao")
ggplot() + geom_density(data = iris, mapping = aes(x = Petal.Width, fill = Species)) + geom_line(data = data.frame(x = x, y = unif_pet), mapping = aes(x = x, y = y), inherit.aes = FALSE, colour = "black") + xlab("width")+ ylab("P(width)") + labs(title = "Probability density function of Iris width vs Uniform Iris width")
lambda = 1/mean(iris$Sepal.Length)
lambda
library(stats)
ggplot(data = iris, mapping = aes(x = range(1, 30), y = dexp(x, rate = lambda))) + geom_line()
library(stats)
lambda = 1/mean(iris$Sepal.Length)
x = range(1, 30)
ggplot(data = iris, mapping = aes(x = x, y = dexp(x, rate = lambda))) + geom_line()
library(stats)
lambda = 1/mean(iris$Sepal.Length)
x = range(1, 30)
ggplot(mapping = aes(x = x, y = dexp(x, rate = lambda))) + geom_line()
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = dexp(iris$Sepal.Length, rate = lambda))) + geom_line()
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = dexp(Sepal.Length, rate = lambda))) + geom_line()
lambda = 1/mean(iris$Sepal.Length)
library(stats)
lambda = 1/mean(iris$Sepal.Length)
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = dexp(Sepal.Length, rate = lambda))) + geom_line()
group1 = iris[iris$Species == 1]$Sepal.Width
group1 = iris[iris$Species == 0]$Sepal.Width
group1 = iris[iris$Species == 1]$Sepal.Width
group2 = iris[iris$Species == 2]$Sepal.Width
group1 = iris[iris$Species == 1]$Sepal.Width
group2 = iris[iris$Species == 2]$Sepal.Width
group1
group1 = iris[Species == 1]$Sepal.Width
group1 = iris[iris$Species == "setosa"]$Sepal.Width
summary(iris$Species)
group1 = iris[iris$Species == "setosa"]$Sepal.Width
group1 = iris[Species == "setosa"]$Sepal.Width
group1 = iris[iris$Species == "setosa"]$Sepal.Width
summary(iris$Species)
group1 = iris[iris$Species == "setosa"]
group1 = iris |> filter(Species == "virginica") |> select(Sepal.Width)
library(dplyr)
group1 = iris |> filter(Species == "virginica") |> select(Sepal.Width)
group2 = iris[Species == "virginica"]
library(dplyr)
group1 = iris |> filter(Species == "virginica") |> select(Sepal.Width)
group2 = iris[Species == "virginica"]
library(dplyr)
group1 = iris |> filter(Species == "virginica") |> select(Sepal.Width)
group2 = iris |> filter(Species == "versicolor") |> select(Sepal.Width)
group1
print(mean(group1), mean(group2))
print(mean(group1))
mean(group1)
mean(group1)
group1
group1 |> mean()
group1 |> mean(Sepal.Width)
group1 |> mean(group1$Sepal.Width)
mean(group1$Sepal.Width)
print(mean(group2$Sepal.Width))
print(mean(group1$Sepal.Width))
print(var(group1$Sepal.Width))
print(var(group2$Sepal.Width))
t.test(group1, group2)
length
length = iris$Sepal.Length
width = iris$Sepal.Width
length
length = iris$Sepal.Length
width = iris$Sepal.Width
width
ggplot() + geom_density2d(mapping = aes(x = length, y = width))
length = iris$Sepal.Length
width = iris$Sepal.Width
print(length)
print(width)
ggplot() + geom_density2d(mapping = aes(x = length, y = width))
install.packages("mvtnorm")
devtools::install_github("AckerDWM/gg3D")
install.packages("devtools")
devtools::install_github("AckerDWM/gg3D")
library("gg3D")
ggplot() + axes_3D() + stat_3D(mapping = aes(x = length, y = width))
ggplot() + axes_3D() + stat_3D(mapping = aes(x = length, y = width, z = count(length, width)))
ggplot() + axes_3D() + stat_3D(mapping = aes(x = length, y = width, z = count(c(length, width)))
ggplot() + axes_3D() + stat_3D(mapping = aes(x = length, y = width, z = count(c(length, width))))
ggplot() + axes_3D() + stat_3D(mapping = aes(x = length, y = width, z = count(c(length, width))))
aggregate = iris |> select(Sepal.Length, Sepal.Width)
summary(aggregate)
aggregate = iris |> select(length = Sepal.Length, width = Sepal.Width)
summary(aggregate)
library("gg3D")
ggplot(data = iris) + axes_3D() + stat_3D(mapping = aes(x = length, y = width, z = count()))
ggplot(data = iris) + axes_3D() + stat_3D(mapping = aes(x = length, y = width, z = count(length, width)))
ggplot(data = iris) + axes_3D() + stat_3D(mapping = aes(x = length, y = width, z = 1))
ggplot(data = iris) + axes_3D(aes(x = length, y = width, z = 1)) + stat_3D(mapping = aes(x = length, y = width, z = 1))
ggplot(data = iris) + axes_3D(aes(x = length, y = width, z)) + stat_3D(mapping = aes(x = length, y = width, z = 1))
ggplot(data = iris) + axes_3D(aes(x = length, y = width, z = count(aggregate))) + stat_3D()
count(aggregate)
count(length, width)
aggregate |> count (width, length)
ggplot(data = iris) + axes_3D(aes(x = length, y = width, aggregate |> count (width, length))) + stat_3D()
number[:2]
number[, 3]
number[3]
number = aggregate |> count (width, length)
number[3]
ggplot(data = iris) + axes_3D(aes(x = length, y = width, z = number)) + stat_3D()
count(number[3])
ggplot(data = iris) + axes_3D(aes(x = unique(length), y = unique(width), z = number)) + stat_3D()
install.packages('mnormt')
library(mnormt)
install.packages('mnormt')
library(mnormt)
set.seed(0)
x1 <- seq(-4, 4, 0.1)
x2 <- seq(-5, 5, 0.1)
mean <- c(0, 0)
cov <- matrix(c(2, -1, -1, 2), nrow=2)
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
install.packages("mnormt")
cov <- ?cov2cor()
cov <- cov(c(iris$Sepal.Length, iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
cov
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
library(mnormt)
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'white',
expand=0.8, ticktype='detailed')
install.packages('mnormt')
library(mnormt)
set.seed(0)
x1 <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.1)
x2 <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
cov
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
install.packages("mnormt")
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x1 <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.1)
x2 <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
cov
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
ggplot() + geom_density_2d(mapping = aes(x = x1, y = c2))
library(ggplot2)
ggplot() + geom_density_2d(mapping = aes(x = x1, y = c2))
library(ggplot2)
ggplot() + geom_density_2d(mapping = aes(x = x1, y = x2))
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x1 <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
x2 <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
cov
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
library(ggplot2)
ggplot() + geom_density_2d(mapping = aes(x = x1, y = x2))
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'white',
expand=0.8, ticktype='detailed')
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'red',
expand=0.8, ticktype='detailed')
#create surface plot (persp solution)
persp(x1, x2, y, theta=-20, phi=20, col = 'red',
expand=0.8, ticktype='detailed')
#Create surface plot (plotly solution)
install.packages("plotly")
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- outer(x, y, f)
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers", color=temp)
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers")
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 50)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), length.out = 50)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- outer(x, y, f)
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers")
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers", colour = "red")
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers", color = "red")
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers")
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 50)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), length.out = 50)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- outer(x, y, f)
z
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 50)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), length.out = 50)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- outer(x, y, f)
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 50)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), length.out = 50)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- outer(x, y, f)
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers")
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers", color = I("red"))
plot_ly(x=x, y=y, z=1, type="scatter3d", mode="markers", color = I("red"))
z <- f(x, y)
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers", color = I("red"))
plot_ly(x=x, y=y, z=f, type="scatter3d", mode="markers", color = I("red"))
plot_ly(x=x, y=y, z=f(x, y), type="scatter3d", mode="markers", color = I("red"))
plot_ly(x=x, y=y, z=f(x, y), type="scatter3d", mode="markers", color = I("red")) + plot_ly(x= )
plot_ly(x=x, y=y, z=f(x, y), type="scatter3d", mode="markers", color = I("red")) + plot_ly(x=x, y=y, z=1, type="scatter3d", mode="markers", color = I("blue"))
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 50)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), length.out = 50)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- f(x, y)
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=f(x, y), type="scatter3d", mode="markers", color = I("red"))
```{r}
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=x, y=y, z=f(x, y), type="scatter3d", mode="markers", color = I("red"))
ggplot() + geom_density_2d(mapping = aes(x=Sepal.length, y=Sepal.width))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width)) + geom_contour(mapping(x = x, y = y, z=z))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width)) + geom_contour(mapping=aes(x = x, y = y, z=z))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue")) + geom_contour(mapping=aes(x = x, y = y, z=z))
z
x
z
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue")) + geom_contour(mapping=aes(x = x, y = y, z=z))
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
x
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- f(x, y)
z
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue")) + geom_contour(mapping=aes(x = x, y = y, z=z))
# Exercise 1
Let's import the dataset first
```{r}
data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length)) + geom_density()
```
Now, we can try to simulate a gaussian with the same $u$ and $Var$
```{r}
x = seq(min(iris$Sepal.Length), max(iris$Sepal.Length), length.out = 100)
u = mean(iris$Sepal.Length)
v = var(iris$Sepal.Length)
gauss = dnorm(x, mean = u, sd = v)
ggplot(data.frame(x=x, y = gauss), aes(x=x, y=y)) + geom_line()
```
We can try to compare them together:
```{r}
#compare = pivot_longer(data = iris, cols = c("Sepal.Width", "Petal.Width"), names_to = "Specie", values_to = "Values")
```
Let's do some similarity testing:
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
x
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- f(x, x)
z
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue")) + geom_contour(mapping=aes(x = x, y = x, z=z))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue")) + geom_contour(mapping=aes(x = x, y = x, z=1))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue"))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue")) + geom_contour(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width, color="blue")) + geom_contour(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width, z = iris$Petal.Length))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width), colour = "blue") + geom_contour(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width, z = iris$Petal.Length))
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width), colour = "blue") + geom_contour(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width, z = iris$Petal.Length), colour = "red")
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width), colour = "blue") + geom_contour(mapping = aes(z = z), colour = "red")
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width), colour = "blue") + geom_contour(mapping = aes(x = x, y = y, z = z), colour = "red")
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
x
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
y
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- f(x, x)
z
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- f(x, x)
z
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width), colour = "blue") + geom_contour(mapping = aes(x = x, y = y, z = z), colour = "red")
z <- outer(x, x, f(x, x))
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
z <- outer(x, x, f)
z
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width), colour = "blue") + geom_contour(mapping = aes(x = x, y = x, z = z), colour = "red")
data = expand.grid((x=x, y=y))
data = expand.grid(x=x, y=y)
data = mutate(data, z = f(x, y))
data
#install.packages('mnormt')
library(mnormt)
set.seed(0)
x <- seq(min(iris$Sepal.Length), max(iris$Sepal.Length), 0.01)
y <- seq(min(iris$Sepal.Width), max(iris$Sepal.Width), 0.01)
data = expand.grid(x=x, y=y)
mean <- c(mean(iris$Sepal.Length), mean(iris$Sepal.Width))
cov <- cov(data.frame(iris$Sepal.Length, iris$Sepal.Width))
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
data = mutate(data, z = f(x, y))
data
ggplot() + geom_density_2d(mapping = aes(x=iris$Sepal.Length, y=iris$Sepal.Width), colour = "blue") + geom_contour(data = data, mapping = aes(x = x, y = y, z = z), colour = "red")
#| label: Plotly
#Create surface plot (plotly solution)
#install.packages("plotly")
library(plotly)
plot_ly(x=data$x, y=data$y, z=data$z, type="scatter3d", mode="markers", color = I("red"))
