---
title: "Chapter 3: Data Transformation in R"
author: "Francesco Calzona"
format: pdf
---
# SECTION 3.1

```{r}
library(nycflights13)
library(tidyverse)
View(flights) #View is useful to scroll datasets; otherwise print/glimpse
glimpse(flights)
```

A glimpse into pipes:

```{r}
flights |>
  filter(dest == "IAH") |>
  group_by(year, month, day) |>
  summarize(arr_delay = mean(arr_delay, na.rm = TRUE))
```

## Row operations

```{r}
#| label: filter()

flights |> filter(dep_delay > 120)
```

The `%in%` operator combines `==` and `|`:

```{r}
#| label: in operator
flights |> filter(day %in% c(1,3,5))
```

dplyr never modifies the input: if we want to save the result, it must be assigned to a new variable. Arrange orders stuff in an increasing order.

```{r}
#| label: arrange()

flights |> arrange(year, month, day, dep_time)
```

We can also do the opposite:

```{r}
#| label: desc()

flights |> arrange(desc(year), desc(month), desc(day), desc(dep_time))
```

`distinct()` finds all unique rows, on all or some columns:

```{r}
#| label: distinct() on all columns

flights|> distinct()
```

```{r}
#| label: distinct() on some columns with column filtering
flights |> distinct(origin, dest)
```

```{r}
#| label: distinct() on some columns without filtering
flights |> distinct(origin, dest, .keep_all = TRUE)
```

`count` also gives you the number of occurrances.

```{r}
#| label: count()

flights |> count(origin, dest, sort = TRUE)
```
### Exercises 3.2.5
```{r}
#| label: Exercise 2.1

glimpse(flights)
flights |> filter(arr_delay >= 120)
flights |> filter(dest %in% c("IAH", "HOU"))
flights |> filter(carrier %in% c("UA", "AA", "DL"))
flights |> filter(month %in% c(7, 8, 9))
flights |> filter(arr_delay >= 120 & dep_delay == 0)
flights |> filter(dep_delay >= 60 & arr_delay <= dep_delay - 30)
```
```{r}
#| label: Exercise 2.2

flights |> arrange(desc(dep_delay), dep_time)
```
```{r}
#| label: Exercise 2.3

flights |> arrange(desc(distance/air_time))
```
```{r}
#| label: Exercise 2.4

flights |> filter(year == 2013) |> count(month, day)
```
```{r}
#| label: Exercise 2.5

flights |> filter(distance == max(distance))
flights |> filter(distance == min(distance))
```
## Column operations
Mutate is used to create new columns from existing ones. It is possible to add them `.before`.
```{r}
#| label: mutate()

flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 3
  )
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = dep_time
  )
```
It is possible to keep only the columns used during the calculations.
```{r}
#| label: .keep

flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time,
    .keep = "used"
  )
```
`select()` is for selecting columns:
```{r}
#| label: select()

flights |> select(air_time, distance)
flights |> select(year:day)
flights |> select(!year:day)
```
```{r}
#| label: select() with matching

flights |> select(where(is.character))
flights |> select(starts_with("dep"))
flights |> select(ends_with("a"))
flights |> select(contains("a"))
flights |> select(num_range("x", 1:3))
```
There are even more in `?select`.
```{r}
#| label: renaming with select

flights |> select(tail_num = tailnum)
```
Rename limits ourselves to the last operation, on all columns
```{r}
flights |> rename(tail_num = tailnum)
```
`relocate()` changes column positions. By default it takes them to the front, otherwise we can use `.before` and `.after`.
```{r}
flights |> relocate(time_hour, air_time)
```
### Exercises 3.3.5
```{r}
#| label: Exercise 1

flights |> select(dep_time, sched_dep_time, dep_delay)
```
```{r}
#| label: Exercise 3

flights |> select(dep_time, dep_time)
```
```{r}
#| label: Exercise 4

flights |> select(any_of(c("year", "month", "day", "dep_delay", "arr_delay")))
```
```{r}
#| label: Exercise 5

flights |> select(contains("TIME"))
```
```{r}
#| label: Exercise 6

flights |> rename(air_time_min = air_time) |> relocate(air_time_min)
```
## Groups

`group_by()` divides the dataset into groups.
```{r}
#| label: group_by()

flights |> group_by(month)
```
The "grouped" feature is referred as **class**. They are useful to get summaries about single groups.
```{r}
#| label: summarize()

flights |> group_by(month) |> summarize(avg_delay = mean(dep_delay, na.rm = TRUE))
```
`n()` counts the elements in a certain group.
```{r}
#| label: n()

flights |>
  group_by(month) |> 
  summarise(avg_delay = mean(dep_delay, na.rm = TRUE), n = n())
```
`slice_` functions are useful to get a bit of information from each group.
```{r}
#| label: slice_head()

flights |> group_by(month) |> slice_head(n = 1)
```
```{r}
#| label: slice_tail()

flights |> group_by(month) |> slice_tail(n = 1)
```
```{r}
#| label: slice_min()

flights |> group_by(month) |> slice_min(arr_delay, n = 1, with_ties = FALSE)
```
`prop` selects a certain proportion of rows inside each group.
```{r}
#| label: slice_max()

flights |> group_by(month) |> slice_max(arr_delay, prop = 0.01)
```
```{r}
#| label: slice_sample()

flights |> group_by(month) |> slice_sample(n = 1)
```
We can create a group based on multiple variables.
```{r}
#| label: multiple group

daily = flights |> group_by(year, month, day)
daily
```
```{r}
#| label: n() with multiple variables

daily |> summarise(n = n(), .groups = "keep")
```
`ungroup()` gets the dataset back to a single group (the default).
```{r}
#| label: ungroup()

daily |> ungroup() |> summarize(flights = n())
```
```{r}
#| label: ungroup()

daily |> ungroup() |> summarize(flights = n(), .by = month)
```
### Exercises 3.5.7
```{r}
#| label: Exercise 3.5.1

flights |> group_by(carrier) |>
  summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
#flights |> group_by(carrier, dest) |>
#  summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
```
```{r}
#| label: Exercise 3.5.2

flights |>
  group_by(dest) |> 
  summarise(delay = max(dep_delay, na.rm = TRUE)) |>
  arrange(desc(delay))
```
```{r}
#| label: Exercise 3.5.3

library(ggplot2)
ggplot(flights, aes(x = dep_time, y = dep_delay)) + geom_point(na.rm = TRUE)

```
```{r}
#| label: Exercise 3.5.4

flights |> group_by(month) |> slice_min(n=-2)

```
```{r}
#| label: Exercise 3.5.6

df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)

df |> group_by(y)
df |> arrange(y)
df |> group_by(y) |> summarise(mean_x = mean(x))
df |> group_by(y, z) |> summarise(mean_x = mean(x))
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
```







