head(hw)
hw$h
hw$w
#To add a new row to the table:
newline = c(169, 60)
hw = rbind(hw, newline)
hw
#There are two ways of adding a column:
age = rnorm(11, 25, 2)
hw$age = age
hw
income = rnorm(11, 40000, 300)
income
income = rnorm(11, 40000, 3000)
income
hw$income = income
summary(hw)
my_function = function(arg){
#something
arg + 1
}
my_function(2)
print(paste("I hereby declare that"))
declaration = function(){
print(paste("I hereby declare that"))
}
declaration()
#Histograms
library(datasets)
histo = hist(iris$Sepal.Length)
str(histo)
class(histo)
str(histo)
a = lm(iris$Sepal.Length - iris$Sepal.Width)
str(a)
#Linear model of length w.r.t. width
a = lm(iris$Sepal.Length, iris$Sepal.Width)
#Linear model of length w.r.t. width
a = lm(iris$Sepal.Length - iris$Sepal.Width)
str(a)
#Linear model of length w.r.t. width
a = lm(iris$Sepal.Length-iris$Sepal.Width)
str(a)
summary(a)
#Linear model of length w.r.t. width
a = lm(iris$Sepal.Length-iris$Sepal.Width)
#Linear model of length w.r.t. width
a = lm(iris$Sepal.Length - iris$Sepal.Width)
#Linear model of length w.r.t. width
?lm
a<-= lm(iris$Sepal.Length - iris$Sepal.Width)
a = lm(iris$Sepal.Length - iris$Sepal.Width)
a = lm(iris$Sepal.Length - iris$Sepal.Width)
a = lm(iris$Sepal.Length - iris$Sepal.Width)
#Linear model of length w.r.t. width
?lm
a = lm(iris$Sepal.Length - iris$Sepal.Width)
a = lm(iris$Sepal.Length ~ iris$Sepal.Width)
str(a)
summary(a)
plot(a)
plot(a)
#Apply functions on columns with the method apply():
mat <- matrix(c(1,2,3,4,7,4,2,5,7), nrow = 3)
apply(mat,2,mean)
#Loops
if (1 == 1){
a <- TRUE
} else {
a <- FALSE
}
#else if
b <- 11
if (b%%2 == 0){
print("even")
} else if (b%%3 == 0){
print("divisible by 3")
} else {
print("crappy number")
}
i <- 1:20
j <- rep(NA,length(i))
#instead of...
for (n in i){
j[i] <- i*11
}
#try...
j <- i*11
#instead of...
letters <- c("a","b", "c","d","e","f","g","h","i","j","k")
vowLets <- c()
vowels <- c("a","e","i","o","u")
for (let in letters){
if (let %in% vowels){
vowLets <- c(vowLets,TRUE) #WARNING: memory inefficient
} else {
vowLets <- c(vowLets, FALSE) #WARNING: memory inefficient
}
}
#try...
vowLets2 <- ifelse(letters %in% vowels, TRUE, FALSE)
vowLets2
#lapply()-----------------------------------
#QUICK REVIEW: normal distribution
#for lists (and btw dfs are lists)
age <- round(rnorm(10,40,10)) #years
height <- round(rnorm(10,140,20)) #cm?
weight <- round(rnorm(10,170,35)) #lbs
people <- data.frame(age = age, height = height, weight = weight)
head(people)
lapply(people,mean)
peopleMAT <- as.matrix(people)
peopleMAT
apply(peopleMAT,2,mean)
apply(peopleMAT,2,mean)  #not a list
library(datasets)
library(MASS)
library(ggplot2)
ggplot(data = mtcars,
mapping = aes(x = wt, color = MPG)) + geom_histogram(binwidth = 0.01)  + labs(
title = "Bill depth vs species",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
y = "Bill depth (mm)", x = "Species",
)
summary(mtcars)
head(mtcars)
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point(mapping = aes(color = gear, shape = gear)) + geom_smooth(method = "lm") + labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) + scale_color_colorblind()
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point(mapping = aes(color = gear, shape = gear)) + geom_smooth(method = "lm") + labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
)
head(mtcars)
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point(mapping = aes(color = vs, shape = vs)) + geom_smooth(method = "lm") + labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
)
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point()) + geom_smooth(method = "lm") + labs(
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point() + geom_smooth(method = "lm") + labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
)
ggplot(data = mtcars,
mapping = aes(x = wt, y = hp)) + geom_point() + geom_smooth(method = "lm")
summary(mtcars)
head(mtcars)
ggplot(data = mtcars,
mapping = aes(x = hp, y = gear)) + geom_point() + geom_smooth(method = "lm")
mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
mapping = aes(x = hp, y = gear) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars,
ggplot(data = mtcars,
ggplot(data = mtcars, mapping = aes(x = hp, y = gear) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point(mapping = aes(color = gear, shape = gear)) + geom_smooth(method = "lm")
head(mtcars)
ggplot(data = mtcars, mapping = aes(x = hp, y = gear)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = gear, y = hp)) + geom_point() + geom_smooth(method = "lm")
head(mtcars)
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point() + geom_smooth(method = "lm")
mode(mtcars$am)
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = am, shape = am)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point() + geom_smooth(method = "lm")
head(mtcars)
head(mtcars)
summary(mtcars)
head(mtcars)
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = cyl)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = cyl, shape=cyl)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = am)) + geom_smooth(method = "lm")
ggplot(data = mtcars, mapping = aes(x = hp, y = qsec)) + geom_point(mapping = aes(color = vs)) + geom_smooth(method = "lm")
#Exercise 1
ggplot(data = mtcars, mapping = aes(x = wt, y = MPG)) + geom_point() + geom_smooth(method = "lm")
#Exercise 1
ggplot(data = mtcars, mapping = aes(x = wt, y = MTG)) + geom_point() + geom_smooth(method = "lm")
#Exercise 1
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg)) + geom_point() + geom_smooth(method = "lm")
#EXERCISES 1.5.5
library(ggplot2)
head(mpg)
#Exercise 2
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(color = year)
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = year))
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = cwy))
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = cty))
head(mpg)
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = year))
head(mpg)
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(size = cty))
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(size = cty, color = cty))
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(shape = cty))
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(shape = drv))
#Exercise 3
ggplot(mpg, aes(x = displ, y = hwy, linewidth = cty)) + geom_point()
#Exercise 3
ggplot(mpg, aes(x = displ, y = hwy, linewidth = cty)) + geom_point() + geom_line(method = "lm")
#Exercise 3
ggplot(mpg, aes(x = displ, y = hwy, linewidth = cty)) + geom_point() + geom_smooth(method = "lm")
#Exercise 3
ggplot(mpg, aes(x = displ, y = hwy, linewidth = cty)) + geom_area() + geom_smooth(method = "lm")
#Exercise 3
ggplot(mpg, aes(x = displ, y = hwy, linewidth = cty)) + geom_curve() + geom_smooth(method = "lm")
#Exercise 3
ggplot(mpg, aes(x = displ, y = hwy, linewidth = cty)) + geom_curve() + geom_smooth(method = "lm")
#Exercise 5
ggplot(penguins, aes(y = bill_depth_mm, x = bill_length_mm)) + geom_point(aes(color = species))
library(palmerpenguins)
#Exercise 5
ggplot(penguins, aes(y = bill_depth_mm, x = bill_length_mm)) + geom_point(aes(color = species))
ggplot(penguins, aes(y = bill_depth_mm, x = bill_length_mm)) + geom_point(aes(color = species)) + facet_wrap(~species)
#Exercise 6
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species
)
) +
geom_point() +
labs(color = "Species")
#Exercise 6
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species
)
) +
geom_point() +
labs(color = "Species", shape = "Species")
#Exercise 6
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species
)
) +
geom_point() +
labs(color = "Species", shape = "Speces")
#Exercise 6
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species
)
) +
geom_point() +
labs(color = "Species", shape = "Species")
#Exercise 7
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
ggplot(penguins, aes(x = species, fill = island)) +
geom_bar(position = "fill")
#SECTION 1.6
ggsave(filename = "penguin-plot-jpg")
#SECTION 1.6
ggsave(filename = "penguin-plot.png")
getwd()
setwd(Desktop/ACSAI/acsai/Data Management/R for Data Science)
setwd(Desktop/ACSAI/acsai/Data\ Management/R for Data Science)
setwd(/home/pachy/Desktop/ACSAI/acsai/Data Management)
setwd(home/pachy/Desktop/ACSAI/acsai/Data Management)
setwd("home/pachy/Desktop/ACSAI/acsai/Data Management")
getwd()
setwd("Desktop/ACSAI/acsai/Data Management")
setwd("R for Data Science")
ggsave(filename = "penguing-plot.png", )
setwd("R for Data Science")
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
ggsave(filename = "penguing-plot.png", )
ggsave(filename = "penguing-plot.pdf", )
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + facet_grid(~gear) + theme_dark()
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + geom_point() + facet_grid(~gear) + theme_dark()
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + geom_point() + facet_grid(~gear) + geom_smooth(method = "LOESS") + theme_dark()
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + geom_point() + facet_grid(~gear) + geom_smooth(method = "loess") + theme_dark()
warnings()
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + geom_point() + facet_grid(~gear) + geom_smooth(method = "lm") + theme_dark()
#Exercise 4
fourcyl = filter(x = mtcars, filter = (cyl==4))
#Exercise 4
fourcyl = filter(mtcars, cyl == 4)
#Exercise 3
ggplot(mtcars, aes(y = mpg, x = wt), color = cyl) + geom_point() + facet_grid(~gear) + geom_smooth(method = "lm") + theme_dark()
#Exercise 4
fourcyl = filter(mtcars, cyl == 4)
#Exercise 4
fourcyl = filter(mtcars, mtcars$cyl == 4)
summary(fourcyl)
head(fourcyl)
summary(mtcars)
#Exercise 4
fourcyl = filter(mtcars, "cyl" == 4)
summary(mtcars)
summary(fourcyl)
#Exercise 4
mode(mtcars)
mtcars = as.data.frame(mtcars)
mode(mtcars)
mtcarsdf = as.data.frame(mtcars)
mode(mtcarsdf)
fourcyl = filter(mtcars, cyl == "4")
fourcyl = dplyr::filter(mtcars, cyl == "4")
summary(fourcyl)
fourcyl = dplyr::filter(mtcars, cyl == 4)
summary(fourcyl)
head(fourcyl)
sixcyl = dplyr::filter(mtcars, cyl == 6)
ggplot(fourcyl, aes(x = mpg)) + geom_boxplot()
ggplot(mtcars, aes(x = cyl, y = mtg)) + geom_boxplot()
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_boxplot()
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_boxplot()
summary(mtcars)
ggplot(mtcars, aes(x = mpg)) + geom_boxplot() + facet_wrap(~cyl)
#Three variables in a graph
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = island)) +
geom_point()
#Facets
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + geom_point(aes(color = species, shape = species)) + facet_wrap(~island)   #the argument of facet_wrap must be a formula, and in particular it needs to be categorical
ggplot(mtcars, aes(x = mpg)) + geom_violin() + facet_wrap(~cyl)
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_violin() + facet_wrap(~cyl)
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_violin()
ggplot(mtcars, aes(x = mpg)) + geom_boxplot() + facet_wrap(~cyl)
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_violin() + facet_wrap(~cyl)
t.test(mtcars[mtcars$cyl == 4]$mpg, mtcars[mtcars$cyl == 6]$mpg)
mtcars[mtcars$cyl == 4]
mtcars[cyl == 4]
mtcars[mtcars$cyl %in$ "4"]
mtcars[mtcars$cyl %in% "4"]
mtcars[mtcars$cyl %in% "4", ]
mtcars[mtcars$cyl == 4, ]
t.test(mtcars[mtcars$cyl == 4, ]$mpg, mtcars[mtcars$cyl == 6, ]$mpg)
ggplot(mtcars, aes(x = mpg)) + geom_boxplot() + facet_wrap(~cyl)
t.test(mtcars[mtcars$cyl == 4, ]$mpg, mtcars[mtcars$cyl == 6, ]$mpg)
#APPLY
#Sum on matrices
m1 = matrix(c(1:10), nrow = 5, ncol = 6)
m1
#APPLY
#Sum on matrices
m1 = matrix(rep(1:10), nrow = 5, ncol = 6)
m1
#APPLY
#Sum on matrices
m1 = matrix(c(1:10), nrow = 5, ncol = 6)
m1
colsum_m1 = apply(m1, 2, sum)
colsum_m1
#LAPPLY
#Apply a function to each element of a list, retaining the dimension
l1 = rep(1:5, 3)
l1
return(x^3)
cube = function(x){
return(x^3)
}
cube_l1 = lapply(l1, cube)
cube_l1
l1
l1
#LAPPLY
#Apply a function to each element of a list, retaining the dimension
l1 = c(1, 2, 3, 4)
l1
cube = function(x){
return(x^3)
}
cube_l1 = lapply(l1, cube)
cube_l1
mode(l1)
l2 = c("francesco", "maria", "giovanni", "diego")
mode(l2)
l2_lower = lapply(l2, toupper)
l2_lower
str(l2_lower)
str(cube_l1)
#SAPPLY
#Same as lapply but returns a vector
dt = cars
lmn_cars = lapply(dt, min)
smn_cars = lapply(dt, min)
lmn_cars
smn_cars
lmn_cars = lapply(dt, min)
smn_cars = sapply(dt, min)
lmn_cars
smn_cars
cars
what = sapply(m1, sum)
what
#SLICE VECTOR APPLICATION
below_ave = function(x){
ave = mean(x)
return(x[x > ave])
}
dt_l = lapply(dt, below_ave)
dt_s
dt_s = sapply(dt, below_ave)
dt_s
dt_l
#TAPPLY
#It computes a function for each factor (categorical variable) of a vector
data(iris)
tapply(iris$Sepal.Width, iris$Species, median)
cube_l1
str(cube_l1)
lmn_cars
smn_cars
str(smn_cars)
str(lmn_cars)
str(smn_cars)
dt_s = sapply(dt, below_ave)
dt_l = lapply(dt, below_ave)
dt_s
return(x[x < ave])
#SLICE VECTOR EXAMPLE: EQUALITY OF SAPPLY AND LAPPLY
below_ave = function(x){
ave = mean(x)
return(x[x < ave])
}
dt_s = sapply(dt, below_ave)
dt_l = lapply(dt, below_ave)
dt_s
dt_l
#SLICE VECTOR EXAMPLE: EQUALITY OF SAPPLY AND LAPPLY
below_ave = function(x){
ave = mean(x)
return(x[x == ave])
}
dt_s = sapply(dt, below_ave)
dt_l = lapply(dt, below_ave)
dt_s
dt_l
#SLICE VECTOR EXAMPLE: EQUALITY OF SAPPLY AND LAPPLY
below_ave = function(x){
ave = median(x)
return(x[x == ave])
}
dt_s = sapply(dt, below_ave)
dt_l = lapply(dt, below_ave)
dt_s
dt_l
#TAPPLY
#It computes a function for each factor (categorical variable) of a vector
data(iris)
tapply(iris$Sepal.Width, iris$Species, median)
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
#MAPPLY
#It applies a certain function to all the first elements, then the seconds, then the thirds...
m = matrix(1:10, nrow = 3, ncol = 5)
#MAPPLY
#It applies a certain function to all the first elements, then the seconds, then the thirds...
m = matrix(1:10, nrow = 2, ncol = 5)
m
#MAPPLY
#It applies a certain function to all the first elements, then the seconds, then the thirds...
m = matrix(1:10, nrow = 4, ncol = 5)
m
#MAPPLY
#It applies a certain function to all the first elements, then the seconds, then the thirds...
m = matrix(1:10, nrow = 2, ncol = 5)
m
#MAPPLY
#It applies a certain function to all the first elements, then the seconds, then the thirds...
m = matrix(1:10, nrow = 4, ncol = 5)
m
mapply(function(v1, v2, v3, v4, v5) v1*v2*v3*v4*v5, m)
#MAPPLY
#It applies a certain function to all the first elements, then the seconds, then the thirds...
v1 = c(1:3)
v2 = c(3:5)
v3 = c(100:102)
mapply(function(x, y, z) z*x*y, v1, v2, v3)
mapply(paste,c("Chelsea", "Tony", "Sam"),
c("Parlett", "Pelleriti","Jones"))
#SECTION 1.1-
primes = c(2, 3, 5, 7, 11, 13)
primes * 2
primes -1
#SECTIONS 3.1-
library(nycflights13)
library(tidyverse)
view(flights)
View(flights)
